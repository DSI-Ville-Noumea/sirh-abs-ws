// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.abs.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.abs.domain.DroitProfil;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DroitProfil_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "absPersistenceUnit")
    transient EntityManager DroitProfil.entityManager;
    
    public static final EntityManager DroitProfil.entityManager() {
        EntityManager em = new DroitProfil().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DroitProfil.countDroitProfils() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DroitProfil o", Long.class).getSingleResult();
    }
    
    public static List<DroitProfil> DroitProfil.findAllDroitProfils() {
        return entityManager().createQuery("SELECT o FROM DroitProfil o", DroitProfil.class).getResultList();
    }
    
    public static DroitProfil DroitProfil.findDroitProfil(Integer idDroitProfil) {
        if (idDroitProfil == null) return null;
        return entityManager().find(DroitProfil.class, idDroitProfil);
    }
    
    public static List<DroitProfil> DroitProfil.findDroitProfilEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DroitProfil o", DroitProfil.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void DroitProfil.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DroitProfil.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DroitProfil attached = DroitProfil.findDroitProfil(this.idDroitProfil);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DroitProfil.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void DroitProfil.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public DroitProfil DroitProfil.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DroitProfil merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
