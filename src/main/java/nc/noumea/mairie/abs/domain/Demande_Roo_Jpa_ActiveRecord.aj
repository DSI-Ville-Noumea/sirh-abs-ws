// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.abs.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.abs.domain.Demande;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Demande_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "absPersistenceUnit")
    transient EntityManager Demande.entityManager;
    
    public static final EntityManager Demande.entityManager() {
        EntityManager em = new Demande().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Demande.countDemandes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Demande o", Long.class).getSingleResult();
    }
    
    public static List<Demande> Demande.findAllDemandes() {
        return entityManager().createQuery("SELECT o FROM Demande o", Demande.class).getResultList();
    }
    
    public static Demande Demande.findDemande(Integer idDemande) {
        if (idDemande == null) return null;
        return entityManager().find(Demande.class, idDemande);
    }
    
    public static List<Demande> Demande.findDemandeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Demande o", Demande.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Demande.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Demande.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Demande attached = Demande.findDemande(this.idDemande);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Demande.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Demande.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Demande Demande.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Demande merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
